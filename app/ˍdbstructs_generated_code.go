// Code generated by `yo/db/codegen_dbstructs.go`. DO NOT EDIT
package haxsh

import q "yo/db/query"

type UserCol = q.C

const (
	UserColId       = UserCol("id_")
	UserColCreated  = UserCol("created_")
	UserColAuth     = UserCol("auth_")
	UserColNickName = UserCol("nick_name_")
)

type UserField q.F

const (
	UserFieldId       UserField = "Id"
	UserFieldCreated  UserField = "Created"
	UserFieldAuth     UserField = "Auth"
	UserFieldNickName UserField = "NickName"
)

func (me UserField) Asc() q.OrderBy               { return ((q.F)(me)).Asc() }
func (me UserField) Desc() q.OrderBy              { return ((q.F)(me)).Desc() }
func (me UserField) Equal(a1 interface{}) q.Query { return ((q.F)(me)).Equal(a1) }
func (me UserField) Eval(a1 interface{}, a2 func(q.C) q.F) interface{} {
	return ((q.F)(me)).Eval(a1, a2)
}
func (me UserField) GreaterOrEqual(a1 interface{}) q.Query { return ((q.F)(me)).GreaterOrEqual(a1) }
func (me UserField) GreaterThan(a1 interface{}) q.Query    { return ((q.F)(me)).GreaterThan(a1) }
func (me UserField) In(a1 ...interface{}) q.Query          { return ((q.F)(me)).In(a1...) }
func (me UserField) LessOrEqual(a1 interface{}) q.Query    { return ((q.F)(me)).LessOrEqual(a1) }
func (me UserField) LessThan(a1 interface{}) q.Query       { return ((q.F)(me)).LessThan(a1) }
func (me UserField) Not() q.Query                          { return ((q.F)(me)).Not() }
func (me UserField) NotEqual(a1 interface{}) q.Query       { return ((q.F)(me)).NotEqual(a1) }
func (me UserField) NotIn(a1 ...interface{}) q.Query       { return ((q.F)(me)).NotIn(a1...) }
func (me UserField) StrLen(a1 ...interface{}) q.Operand    { return ((q.F)(me)).StrLen(a1...) }
