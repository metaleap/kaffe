{
  "openapi": "3.1.0",
  "info": {
    "title": "kaffe.chat",
    "description": "\nRequest/response rules and how to read their example renditions:\n- All request headers, URL query-string parameters and response headers are identical over the whole set of all operations. Only request and response bodies are operation-specific.\n- Request bodies must never be empty or the JSON `null`: the empty request body is the JSON `{}`.\n- Response bodies will never be empty, but may be the JSON `null`.\n- All request fields are by default optional and ommittable / `null`able, **any exceptions** to this are indicated by the operation's listed known-error responses.\n- Example values rendered in this doc:\n  - `true` indicates any `boolean` value, regardless of the actual real value in a call\n  - `\"someStr\"` indicates any `string` value\n  - date-time values are indicated by RFC3339-formatted `string` examples\n  - signed-integer `number`s are indicated by a negative-number example indicating the minimum (type-wise, not operation-specific) permissible value, with the maximum being the corresponding positive-number counterpart\n  - unsigned-integer `number`s are indicated by a positive-number example indicating the maximum (type-wise, not not operation-specific) permissible value, with the minimum being `0`\n  - floating-point `number`s are indicated by a positive-number example indicating the maximum (type-wise, not not operation-specific) permissible value, with the minimum being the corresponding negative-number counterpart\n\nMore about error responses:\n- All are `text/plain`.\n- In addition to those listed in this doc (thrown by the service under the indicated conditions), other error responses are always entirely possible and not exhaustively documentable feasibly (such as DB, file-system or network disruptions). Those caught by the service will be `500`s, others (ie. from load-balancers / gateways / reverse-proxies etc. in front of the service) might have any HTTP status code.\n- The well-known error responses listed here have been recursively determined by code-path walking. Among them are some that logically could not possibly ever occur for that operation, yet identifying those (to filter them out of the listing) is (so far) out of scope for our `openapi.json` generation.\n- The well-known (thrown rather than caught) errors have their code-identifier-compatible (spaceless ASCII) enumerant-name as their entire text response, others preserve simply their original (usually human-language) error message fully. Hence, error responses are inherently `switch/case`able.\n\t\t",
    "version": "23.318",
    "contact": {
      "name": "Permalink",
      "url": "https://kaffe.chat/__static/openapi.json"
    }
  },
  "paths": {
    "/_/postDelete": {
      "post": {
        "operationId": "__postDelete",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `__postDelete_In`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "Id": -9007199254740991
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `yo/util.None`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {}
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Possible `text/plain` responses:\n- `__postDelete_InvalidPostId`",
            "content": {
              "text/plain": {
                "examples": {
                  "__postDelete_InvalidPostId": {
                    "value": "__postDelete_InvalidPostId"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/postEmojiFullList": {
      "post": {
        "operationId": "__postEmojiFullList",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `yo/util.None`",
          "required": true,
          "content": {
            "application/json": {
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `yo/util.Return[map[string]string]`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "Result": {
                    "someMapKey1": "someStr",
                    "some_map_key_2": "someStr"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/postMonthsUtc": {
      "post": {
        "operationId": "__postMonthsUtc",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `__postMonthsUtc_In`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "WithUserIds": [
                  -9007199254740991
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `__postMonthsUtc_Out`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "Periods": [
                    {
                      "Year": 65535,
                      "Month": 255
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/postNew": {
      "post": {
        "operationId": "__postNew",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `kaffe/app.Post`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "Id": -9007199254740991,
                "DtMade": "2023-11-14T16:29:30.417334885Z",
                "DtMod": "2023-11-14T16:29:30.417338235Z",
                "By": {},
                "To": [
                  -9007199254740991
                ],
                "Htm": "someStr",
                "Files": [
                  "someStr"
                ],
                "FileContentTypes": [
                  "someStr"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `yo/util.Return[yo/db.I64]`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "Result": -9007199254740991
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Possible `text/plain` responses:\n- `__postNew_ExpectedNonEmptyPost`\n- `__postNew_ExpectedOnlyBuddyRecipients`\n- `__postNew_ExpectedEmptyFilesFieldWithUploadedFilesInMultipartForm`",
            "content": {
              "text/plain": {
                "examples": {
                  "__postNew_ExpectedEmptyFilesFieldWithUploadedFilesInMultipartForm": {
                    "value": "__postNew_ExpectedEmptyFilesFieldWithUploadedFilesInMultipartForm"
                  },
                  "__postNew_ExpectedNonEmptyPost": {
                    "value": "__postNew_ExpectedNonEmptyPost"
                  },
                  "__postNew_ExpectedOnlyBuddyRecipients": {
                    "value": "__postNew_ExpectedOnlyBuddyRecipients"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/postsDeleted": {
      "post": {
        "operationId": "__postsDeleted",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `__postsDeleted_In`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "OutOfPostIds": [
                  -9007199254740991
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `__postsDeleted_Out`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "DeletedPostIds": [
                    -9007199254740991
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/postsForMonthUtc": {
      "post": {
        "operationId": "__postsForMonthUtc",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `kaffe/app.ApiArgPeriod`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "Period": {
                  "Year": 65535,
                  "Month": 255
                },
                "OnlyBy": [
                  -9007199254740991
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `kaffe/app.PostsListResult`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "Posts": [
                    {
                      "Id": -9007199254740991,
                      "DtMade": "2023-11-14T16:29:30.417413156Z",
                      "DtMod": "2023-11-14T16:29:30.417415693Z",
                      "By": 0,
                      "To": [
                        -9007199254740991
                      ],
                      "Htm": "someStr",
                      "Files": [
                        "someStr"
                      ],
                      "FileContentTypes": [
                        "someStr"
                      ]
                    }
                  ],
                  "NextSince": "2023-11-14T16:29:30.417425691Z",
                  "UnreadCounts": {
                    "someMapKey1": -9007199254740991,
                    "some_map_key_2": -9007199254740991
                  }
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/postsRecent": {
      "post": {
        "operationId": "__postsRecent",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `__postsRecent_In`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "Since": "2023-11-14T16:29:30.417452214Z",
                "OnlyBy": [
                  -9007199254740991
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `kaffe/app.PostsListResult`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "Posts": [
                    {
                      "Id": -9007199254740991,
                      "DtMade": "2023-11-14T16:29:30.417459313Z",
                      "DtMod": "2023-11-14T16:29:30.417461722Z",
                      "By": 0,
                      "To": [
                        -9007199254740991
                      ],
                      "Htm": "someStr",
                      "Files": [
                        "someStr"
                      ],
                      "FileContentTypes": [
                        "someStr"
                      ]
                    }
                  ],
                  "NextSince": "2023-11-14T16:29:30.417471454Z",
                  "UnreadCounts": {
                    "someMapKey1": -9007199254740991,
                    "some_map_key_2": -9007199254740991
                  }
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/userBuddies": {
      "post": {
        "operationId": "__userBuddies",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `yo/util.None`",
          "required": true,
          "content": {
            "application/json": {
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `__userBuddies_Out`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "Buddies": [
                    {
                      "Id": -9007199254740991,
                      "DtMade": "2023-11-14T16:29:30.417502478Z",
                      "DtMod": "2023-11-14T16:29:30.417504915Z",
                      "LastSeen": "2023-11-14T16:29:30.417507518Z",
                      "Auth": 0,
                      "PicFileId": "someStr",
                      "Nick": "someStr",
                      "Btw": "someStr",
                      "Buddies": [
                        -9007199254740991
                      ],
                      "BtwEmoji": "someStr",
                      "Offline": true
                    }
                  ],
                  "BuddyRequestsBy": [
                    {
                      "Id": -9007199254740991,
                      "DtMade": "2023-11-14T16:29:30.417520488Z",
                      "DtMod": "2023-11-14T16:29:30.417522846Z",
                      "LastSeen": "2023-11-14T16:29:30.417525242Z",
                      "Auth": 0,
                      "PicFileId": "someStr",
                      "Nick": "someStr",
                      "Btw": "someStr",
                      "Buddies": [
                        -9007199254740991
                      ],
                      "BtwEmoji": "someStr",
                      "Offline": true
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/userBuddiesAdd": {
      "post": {
        "operationId": "__userBuddiesAdd",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `__userBuddiesAdd_In`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "NickOrEmailAddr": "someStr"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `__userBuddiesAdd_Out`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "Done": true
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Possible `text/plain` responses:\n- `__userBuddiesAdd_ExpectedEitherNickNameOrEmailAddr`\n- `DbUpdate_ExpectedChangesForUpdate`\n- `DbUpdate_ExpectedQueryForUpdate`",
            "content": {
              "text/plain": {
                "examples": {
                  "DbUpdate_ExpectedChangesForUpdate": {
                    "value": "DbUpdate_ExpectedChangesForUpdate"
                  },
                  "DbUpdate_ExpectedQueryForUpdate": {
                    "value": "DbUpdate_ExpectedQueryForUpdate"
                  },
                  "__userBuddiesAdd_ExpectedEitherNickNameOrEmailAddr": {
                    "value": "__userBuddiesAdd_ExpectedEitherNickNameOrEmailAddr"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/userBy": {
      "post": {
        "operationId": "__userBy",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `__userBy_In`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "EmailAddr": "someStr",
                "NickName": "someStr"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `kaffe/app.User`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {
                  "Id": -9007199254740991,
                  "DtMade": "2023-11-14T16:29:30.417592788Z",
                  "DtMod": "2023-11-14T16:29:30.41759535Z",
                  "LastSeen": "2023-11-14T16:29:30.417597772Z",
                  "Auth": {},
                  "PicFileId": "someStr",
                  "Nick": "someStr",
                  "Btw": "someStr",
                  "Buddies": [
                    -9007199254740991
                  ],
                  "BtwEmoji": "someStr",
                  "Offline": true
                }
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Possible `text/plain` responses:\n- `__userBy_ExpectedEitherNickNameOrEmailAddr`",
            "content": {
              "text/plain": {
                "examples": {
                  "__userBy_ExpectedEitherNickNameOrEmailAddr": {
                    "value": "__userBy_ExpectedEitherNickNameOrEmailAddr"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/userSignInOrReset": {
      "post": {
        "operationId": "__userSignInOrReset",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `kaffe/app.ApiUserSignInOrReset`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "NickOrEmailAddr": "someStr",
                "PasswordPlain": "lenOfMin6AndMax64",
                "Password2Plain": "lenOfMin6AndMax64"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `yo/util.None`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {}
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `___yo_authLoginOrFinalizePwdReset_AccountDoesNotExist`\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  },
                  "___yo_authLoginOrFinalizePwdReset_AccountDoesNotExist": {
                    "value": "___yo_authLoginOrFinalizePwdReset_AccountDoesNotExist"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Possible `text/plain` responses:\n- `__userSignInOrReset_WrongPassword`\n- `___yo_authLoginOrFinalizePwdReset_WrongPassword`",
            "content": {
              "text/plain": {
                "examples": {
                  "___yo_authLoginOrFinalizePwdReset_WrongPassword": {
                    "value": "___yo_authLoginOrFinalizePwdReset_WrongPassword"
                  },
                  "__userSignInOrReset_WrongPassword": {
                    "value": "__userSignInOrReset_WrongPassword"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Possible `text/plain` responses:\n- `__userSignInOrReset_ExpectedPasswordAndNickOrEmailAddr`\n- `___yo_authLoginOrFinalizePwdReset_EmailRequiredButMissing`\n- `___yo_authLoginOrFinalizePwdReset_EmailInvalid`\n- `___yo_authLoginOrFinalizePwdReset_NewPasswordTooShort`\n- `___yo_authLoginOrFinalizePwdReset_NewPasswordTooLong`\n- `___yo_authLoginOrFinalizePwdReset_NewPasswordExpectedToDiffer`\n- `___yo_authLoginOrFinalizePwdReset_PwdResetRequired`\n- `___yo_authLoginOrFinalizePwdReset_NewPasswordInvalid`\n- `DbUpdate_ExpectedChangesForUpdate`\n- `DbUpdate_ExpectedQueryForUpdate`",
            "content": {
              "text/plain": {
                "examples": {
                  "DbUpdate_ExpectedChangesForUpdate": {
                    "value": "DbUpdate_ExpectedChangesForUpdate"
                  },
                  "DbUpdate_ExpectedQueryForUpdate": {
                    "value": "DbUpdate_ExpectedQueryForUpdate"
                  },
                  "___yo_authLoginOrFinalizePwdReset_EmailInvalid": {
                    "value": "___yo_authLoginOrFinalizePwdReset_EmailInvalid"
                  },
                  "___yo_authLoginOrFinalizePwdReset_EmailRequiredButMissing": {
                    "value": "___yo_authLoginOrFinalizePwdReset_EmailRequiredButMissing"
                  },
                  "___yo_authLoginOrFinalizePwdReset_NewPasswordExpectedToDiffer": {
                    "value": "___yo_authLoginOrFinalizePwdReset_NewPasswordExpectedToDiffer"
                  },
                  "___yo_authLoginOrFinalizePwdReset_NewPasswordInvalid": {
                    "value": "___yo_authLoginOrFinalizePwdReset_NewPasswordInvalid"
                  },
                  "___yo_authLoginOrFinalizePwdReset_NewPasswordTooLong": {
                    "value": "___yo_authLoginOrFinalizePwdReset_NewPasswordTooLong"
                  },
                  "___yo_authLoginOrFinalizePwdReset_NewPasswordTooShort": {
                    "value": "___yo_authLoginOrFinalizePwdReset_NewPasswordTooShort"
                  },
                  "___yo_authLoginOrFinalizePwdReset_PwdResetRequired": {
                    "value": "___yo_authLoginOrFinalizePwdReset_PwdResetRequired"
                  },
                  "__userSignInOrReset_ExpectedPasswordAndNickOrEmailAddr": {
                    "value": "__userSignInOrReset_ExpectedPasswordAndNickOrEmailAddr"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Possible `text/plain` responses:\n- `___yo_authLoginOrFinalizePwdReset_PwdReqExpired`\n- `___yo_authLoginOrFinalizePwdReset_OkButFailedToCreateSignedToken`",
            "content": {
              "text/plain": {
                "examples": {
                  "___yo_authLoginOrFinalizePwdReset_OkButFailedToCreateSignedToken": {
                    "value": "___yo_authLoginOrFinalizePwdReset_OkButFailedToCreateSignedToken"
                  },
                  "___yo_authLoginOrFinalizePwdReset_PwdReqExpired": {
                    "value": "___yo_authLoginOrFinalizePwdReset_PwdReqExpired"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/userSignOut": {
      "post": {
        "operationId": "__userSignOut",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `yo/util.None`",
          "required": true,
          "content": {
            "application/json": {
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `yo/util.None`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {}
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/userSignUpOrForgotPassword": {
      "post": {
        "operationId": "__userSignUpOrForgotPassword",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `kaffe/app.ApiNickOrEmailAddr`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "NickOrEmailAddr": "someStr"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `yo/util.None`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {}
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Possible `text/plain` responses:\n- `___yo_authRegister_EmailAddrAlreadyExists`",
            "content": {
              "text/plain": {
                "examples": {
                  "___yo_authRegister_EmailAddrAlreadyExists": {
                    "value": "___yo_authRegister_EmailAddrAlreadyExists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Possible `text/plain` responses:\n- `__userSignUpOrForgotPassword_EmailRequiredButMissing`\n- `__userSignUpOrForgotPassword_EmailInvalid`\n- `___yo_authRegister_EmailRequiredButMissing`\n- `___yo_authRegister_EmailInvalid`\n- `___yo_authRegister_PasswordTooShort`\n- `___yo_authRegister_PasswordTooLong`\n- `___yo_authRegister_PasswordInvalid`",
            "content": {
              "text/plain": {
                "examples": {
                  "___yo_authRegister_EmailInvalid": {
                    "value": "___yo_authRegister_EmailInvalid"
                  },
                  "___yo_authRegister_EmailRequiredButMissing": {
                    "value": "___yo_authRegister_EmailRequiredButMissing"
                  },
                  "___yo_authRegister_PasswordInvalid": {
                    "value": "___yo_authRegister_PasswordInvalid"
                  },
                  "___yo_authRegister_PasswordTooLong": {
                    "value": "___yo_authRegister_PasswordTooLong"
                  },
                  "___yo_authRegister_PasswordTooShort": {
                    "value": "___yo_authRegister_PasswordTooShort"
                  },
                  "__userSignUpOrForgotPassword_EmailInvalid": {
                    "value": "__userSignUpOrForgotPassword_EmailInvalid"
                  },
                  "__userSignUpOrForgotPassword_EmailRequiredButMissing": {
                    "value": "__userSignUpOrForgotPassword_EmailRequiredButMissing"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/_/userUpdate": {
      "post": {
        "operationId": "__userUpdate",
        "parameters": [
          {
            "name": "yoValiOnly",
            "in": "query",
            "description": "if not empty, enforces request-validation-only, with no further actual work performed to produce results and/or effects",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          },
          {
            "name": "yoFail",
            "in": "query",
            "description": "if not empty, enforces an early error response (prior to any request parsing or processing) with the specified HTTP status code (eg. for tests of error-handling)",
            "content": {
              "text/plain": {
                "example": ""
              }
            }
          }
        ],
        "requestBody": {
          "description": "Internal type ident: `yo/db.ApiUpdateArgs[kaffe/app.User,kaffe/app.UserField]`",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "Id": -9007199254740991,
                "Changes": {
                  "Id": -9007199254740991,
                  "DtMade": "2023-11-14T16:29:30.417782734Z",
                  "DtMod": "2023-11-14T16:29:30.417785437Z",
                  "LastSeen": "2023-11-14T16:29:30.417787912Z",
                  "Auth": {},
                  "PicFileId": "someStr",
                  "Nick": "someStr",
                  "Btw": "someStr",
                  "Buddies": [
                    -9007199254740991
                  ],
                  "BtwEmoji": "someStr",
                  "Offline": true
                },
                "ChangedFields": [
                  "someStr"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal type ident: `yo/util.None`",
            "headers": {
              "X-Yo-User": {
                "description": "0 if not authenticated, else current user's ID",
                "content": {
                  "text/plain": {
                    "example": "123"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "example": {}
              }
            }
          },
          "400": {
            "description": "Possible `text/plain` responses:\n- `MissingOrExcessiveContentLength`",
            "content": {
              "text/plain": {
                "examples": {
                  "MissingOrExcessiveContentLength": {
                    "value": "MissingOrExcessiveContentLength"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Possible `text/plain` responses:\n- `Unauthorized`",
            "content": {
              "text/plain": {
                "examples": {
                  "Unauthorized": {
                    "value": "Unauthorized"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Possible `text/plain` responses:\n- `__userUpdate_NicknameAlreadyExists`",
            "content": {
              "text/plain": {
                "examples": {
                  "__userUpdate_NicknameAlreadyExists": {
                    "value": "__userUpdate_NicknameAlreadyExists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Possible `text/plain` responses:\n- `__userUpdate_ExpectedNonEmptyNickname`\n- `DbUpdExpectedIdGt0`\n- `DbUpdate_ExpectedChangesForUpdate`\n- `DbUpdate_ExpectedQueryForUpdate`",
            "content": {
              "text/plain": {
                "examples": {
                  "DbUpdExpectedIdGt0": {
                    "value": "DbUpdExpectedIdGt0"
                  },
                  "DbUpdate_ExpectedChangesForUpdate": {
                    "value": "DbUpdate_ExpectedChangesForUpdate"
                  },
                  "DbUpdate_ExpectedQueryForUpdate": {
                    "value": "DbUpdate_ExpectedQueryForUpdate"
                  },
                  "__userUpdate_ExpectedNonEmptyNickname": {
                    "value": "__userUpdate_ExpectedNonEmptyNickname"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Possible `text/plain` responses:\n- `TimedOut`",
            "content": {
              "text/plain": {
                "examples": {
                  "TimedOut": {
                    "value": "TimedOut"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}